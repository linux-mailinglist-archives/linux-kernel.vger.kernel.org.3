Return-Path: <linux-kernel-owner@vger.kernel.org>
X-Original-To: lists+linux-kernel@lfdr.de
Delivered-To: lists+linux-kernel@lfdr.de
Received: from out1.vger.email (out1.vger.email [IPv6:2620:137:e000::1:20])
	by mail.lfdr.de (Postfix) with ESMTP id 2050751526E
	for <lists+linux-kernel@lfdr.de>; Fri, 29 Apr 2022 19:40:03 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1379733AbiD2RnR (ORCPT <rfc822;lists+linux-kernel@lfdr.de>);
        Fri, 29 Apr 2022 13:43:17 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:43864 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1379210AbiD2RnO (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 29 Apr 2022 13:43:14 -0400
Received: from dfw.source.kernel.org (dfw.source.kernel.org [139.178.84.217])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 1E211D0831
        for <linux-kernel@vger.kernel.org>; Fri, 29 Apr 2022 10:39:55 -0700 (PDT)
Received: from smtp.kernel.org (relay.kernel.org [52.25.139.140])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by dfw.source.kernel.org (Postfix) with ESMTPS id B5979623E9
        for <linux-kernel@vger.kernel.org>; Fri, 29 Apr 2022 17:39:54 +0000 (UTC)
Received: by smtp.kernel.org (Postfix) with ESMTPSA id 170D0C385A7;
        Fri, 29 Apr 2022 17:39:54 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=k20201202; t=1651253994;
        bh=HC9TdVLo9keVPG6iukg9qEk+kO7QXIdsNKSS4mzp4X8=;
        h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
        b=UGI7S8FNgdtcOXLEqKlU1tl5scm27Cx1qHZBOAOHmyGD+yaUU9lZjMPT70K4xzebr
         /Dhy05YI0+gGeWUjvdZk3AaGGAp9EY75hmiBqCBpwjZAGGg1W3EQULqCV2oSPoU22M
         K9MpWGNmFq67Oy2qofL2bZQ+pZyfUg0URG+d3bCW1eiq4QfQyYWwrEngS0YnxCmen7
         uZv9JUwwUhUSLEcq7g0wrCZPUvzSHjMjj3PD8JLhJHNRQwFd5SdWwj6eQrGc9Vt9jJ
         bP/M6kHI51qwfPO1xpMxRDmx2HmG+XrnKbkGh+maNzJpmty0yF5fidNtV0FFnjuptr
         fMTM5eHhFjoIA==
Received: from sofa.misterjones.org ([185.219.108.64] helo=why.misterjones.org)
        by disco-boy.misterjones.org with esmtpsa  (TLS1.3) tls TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        (Exim 4.94.2)
        (envelope-from <maz@kernel.org>)
        id 1nkUat-00809D-JJ; Fri, 29 Apr 2022 18:39:51 +0100
Date:   Fri, 29 Apr 2022 18:39:51 +0100
Message-ID: <87pmkz94bc.wl-maz@kernel.org>
From:   Marc Zyngier <maz@kernel.org>
To:     Daniel Thompson <daniel.thompson@linaro.org>
Cc:     Thomas Gleixner <tglx@linutronix.de>,
        Catalin Marinas <catalin.marinas@arm.com>,
        Will Deacon <will@kernel.org>,
        Ard Biesheuvel <ardb@kernel.org>,
        linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org
Subject: Re: [PATCH v2] irqchip/exiu: Fix acknowledgment of edge triggered interrupts
In-Reply-To: <20220429165314.2343705-1-daniel.thompson@linaro.org>
References: <20220429165314.2343705-1-daniel.thompson@linaro.org>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM-LB/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL-LB/10.8 EasyPG/1.0.0 Emacs/27.1
 (x86_64-pc-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
Content-Type: text/plain; charset=US-ASCII
X-SA-Exim-Connect-IP: 185.219.108.64
X-SA-Exim-Rcpt-To: daniel.thompson@linaro.org, tglx@linutronix.de, catalin.marinas@arm.com, will@kernel.org, ardb@kernel.org, linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org
X-SA-Exim-Mail-From: maz@kernel.org
X-SA-Exim-Scanned: No (on disco-boy.misterjones.org); SAEximRunCond expanded to false
X-Spam-Status: No, score=-7.7 required=5.0 tests=BAYES_00,DKIMWL_WL_HIGH,
        DKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,DKIM_VALID_EF,RCVD_IN_DNSWL_HI,
        SPF_HELO_NONE,SPF_PASS autolearn=ham autolearn_force=no version=3.4.6
X-Spam-Checker-Version: SpamAssassin 3.4.6 (2021-04-09) on
        lindbergh.monkeyblade.net
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri, 29 Apr 2022 17:53:14 +0100,
Daniel Thompson <daniel.thompson@linaro.org> wrote:
> 
> Currently the EXIU uses the fasteoi interrupt flow that is configured by
> it's parent (irq-gic-v3.c). With this flow the only chance to clear the
> interrupt request happens during .irq_eoi() and (obviously) this happens
> after the interrupt handler has run. EXIU requires edge triggered
> interrupts to be acked prior to interrupt handling. Without this we
> risk incorrect interrupt dismissal when a new interrupt is delivered
> after the handler reads and acknowledges the peripheral but before the
> irq_eoi() takes place.
> 
> Fix this by clearing the interrupt request from .irq_ack() if we are
> configured for edge triggered interrupts. This requires adopting the
> fasteoi-ack flow instead of the fasteoi to ensure the ack gets called.
> 
> These changes have been tested using the power button on a
> Developerbox/SC2A11 combined with some hackery in gpio-keys so I can
> play with the different trigger mode (and an mdelay(500) so I can
> can check what happens on a double click in both modes.
> 
> Fixes: 706cffc1b912 ("irqchip/exiu: Add support for Socionext Synquacer EXIU controller")
> Signed-off-by: Daniel Thompson <daniel.thompson@linaro.org>
> ---
> 
> Notes:
>     Changes in v2:
>     
>      * Switch to dynamic selection of handle_fasteoi_irq and
>        handle_fasteoi_ack_irq and reintroduce exiu_irq_eoi() since we need
>        that for level triggered interrupts (Ard B).
>      * Above changes mean we are no longer using sun6i NMI code as a
>        template to tidy up the description accordingly.
> 
>  arch/arm64/Kconfig.platforms   |  1 +
>  drivers/irqchip/irq-sni-exiu.c | 33 +++++++++++++++++++++++++++++----
>  2 files changed, 30 insertions(+), 4 deletions(-)
> 
> diff --git a/arch/arm64/Kconfig.platforms b/arch/arm64/Kconfig.platforms
> index 30b123cde02c..aaeaf57c8222 100644
> --- a/arch/arm64/Kconfig.platforms
> +++ b/arch/arm64/Kconfig.platforms
> @@ -253,6 +253,7 @@ config ARCH_INTEL_SOCFPGA
> 
>  config ARCH_SYNQUACER
>  	bool "Socionext SynQuacer SoC Family"
> +	select IRQ_FASTEOI_HIERARCHY_HANDLERS
> 
>  config ARCH_TEGRA
>  	bool "NVIDIA Tegra SoC Family"
> diff --git a/drivers/irqchip/irq-sni-exiu.c b/drivers/irqchip/irq-sni-exiu.c
> index abd011fcecf4..651a82dead01 100644
> --- a/drivers/irqchip/irq-sni-exiu.c
> +++ b/drivers/irqchip/irq-sni-exiu.c
> @@ -37,11 +37,20 @@ struct exiu_irq_data {
>  	u32		spi_base;
>  };
> 
> -static void exiu_irq_eoi(struct irq_data *d)
> +static void exiu_irq_ack(struct irq_data *d)
>  {
>  	struct exiu_irq_data *data = irq_data_get_irq_chip_data(d);
> 
>  	writel(BIT(d->hwirq), data->base + EIREQCLR);
> +}
> +
> +static void exiu_irq_eoi(struct irq_data *d)
> +{
> +	struct exiu_irq_data *data = irq_data_get_irq_chip_data(d);
> +	u32 edge_triggered = readl_relaxed(data->base + EIEDG);

I expect this to be pretty expensive. Why not directly check the state
flags with irqd_is_level_type()?

> +
> +	if (!(edge_triggered & BIT(d->hwirq)))
> +		writel(BIT(d->hwirq), data->base + EIREQCLR);

Is this write even needed for a level interrupt? Or does the register
always behave as a latch irrespective of the trigger?

>  	irq_chip_eoi_parent(d);
>  }
> 
> @@ -91,10 +100,13 @@ static int exiu_irq_set_type(struct irq_data *d, unsigned int type)
>  	writel_relaxed(val, data->base + EILVL);
> 
>  	val = readl_relaxed(data->base + EIEDG);
> -	if (type == IRQ_TYPE_LEVEL_LOW || type == IRQ_TYPE_LEVEL_HIGH)
> +	if (type == IRQ_TYPE_LEVEL_LOW || type == IRQ_TYPE_LEVEL_HIGH) {
>  		val &= ~BIT(d->hwirq);
> -	else
> +		irq_set_handler_locked(d, handle_fasteoi_irq);
> +	} else {
>  		val |= BIT(d->hwirq);
> +		irq_set_handler_locked(d, handle_fasteoi_ack_irq);
> +	}
>  	writel_relaxed(val, data->base + EIEDG);
>
>  	writel_relaxed(BIT(d->hwirq), data->base + EIREQCLR);
> @@ -104,6 +116,7 @@ static int exiu_irq_set_type(struct irq_data *d, unsigned int type)
> 
>  static struct irq_chip exiu_irq_chip = {
>  	.name			= "EXIU",
> +	.irq_ack		= exiu_irq_ack,
>  	.irq_eoi		= exiu_irq_eoi,
>  	.irq_enable		= exiu_irq_enable,
>  	.irq_mask		= exiu_irq_mask,
> @@ -148,6 +161,8 @@ static int exiu_domain_alloc(struct irq_domain *dom, unsigned int virq,
>  	struct irq_fwspec parent_fwspec;
>  	struct exiu_irq_data *info = dom->host_data;
>  	irq_hw_number_t hwirq;
> +	int i, ret;
> +	u32 edge_triggered;
> 
>  	parent_fwspec = *fwspec;
>  	if (is_of_node(dom->parent->fwnode)) {
> @@ -165,7 +180,17 @@ static int exiu_domain_alloc(struct irq_domain *dom, unsigned int virq,
>  	irq_domain_set_hwirq_and_chip(dom, virq, hwirq, &exiu_irq_chip, info);
> 
>  	parent_fwspec.fwnode = dom->parent->fwnode;
> -	return irq_domain_alloc_irqs_parent(dom, virq, nr_irqs, &parent_fwspec);
> +	ret = irq_domain_alloc_irqs_parent(dom, virq, nr_irqs, &parent_fwspec);
> +	if (ret)
> +		return ret;
> +
> +	edge_triggered = readl_relaxed(info->base + EIEDG);
> +	for (i = 0; i < nr_irqs; i++)
> +		irq_set_handler(virq + i, edge_triggered & BIT(i) ?
> +						  handle_fasteoi_ack_irq :
> +							handle_fasteoi_irq);
> +
> +	return 0;

Why do you need this at allocation time? I would have expected the
trigger configuration to be enough.

Thanks,

	M.

-- 
Without deviation from the norm, progress is not possible.
