Return-Path: <linux-kernel-owner@vger.kernel.org>
X-Original-To: lists+linux-kernel@lfdr.de
Delivered-To: lists+linux-kernel@lfdr.de
Received: from out1.vger.email (out1.vger.email [IPv6:2620:137:e000::1:20])
	by mail.lfdr.de (Postfix) with ESMTP id 2128659F5EF
	for <lists+linux-kernel@lfdr.de>; Wed, 24 Aug 2022 11:10:48 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S234026AbiHXJKm (ORCPT <rfc822;lists+linux-kernel@lfdr.de>);
        Wed, 24 Aug 2022 05:10:42 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:34394 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S234852AbiHXJKk (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 24 Aug 2022 05:10:40 -0400
Received: from mail-qv1-xf29.google.com (mail-qv1-xf29.google.com [IPv6:2607:f8b0:4864:20::f29])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 31D9B3FA02
        for <linux-kernel@vger.kernel.org>; Wed, 24 Aug 2022 02:10:39 -0700 (PDT)
Received: by mail-qv1-xf29.google.com with SMTP id e4so12391052qvr.2
        for <linux-kernel@vger.kernel.org>; Wed, 24 Aug 2022 02:10:39 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20210112;
        h=cc:to:subject:message-id:date:from:in-reply-to:references
         :mime-version:from:to:cc;
        bh=qp5U4hlmW1coNM2H6xZQ1GZizUdeX5ho/eYaDjMVqY0=;
        b=esvYOuK4gh+mq2fW9go+4DjZ7T6fOpQzZkckuZ5y9mpQtZSUJri1HxYNVcDhsWD1aC
         LIDLhIs0sZMkpuw50YoGBx+5PlpbDGD4OeEGytcOOy/SrK2OTBE6i8y4GG+QEhkoTpgU
         jv72bkrJrln2HawFU4ZLdoeCFxMJSKbitk4yZgEHrLdgh+tMkWWqj1wIx7P3Vk+qp8Gx
         PvL9zdqx5uORFYM8H0KnnE8IGf31GakqCrrfr1MnS6oGfA2wSJUBPmlHejUySP1C9ja6
         WkAqd5/ZH0Eu639lwkjg19vdGPF9ahGqtCX6Rjz4t4UjA+ASsUXQ0nhC3VRU5tR0TOj0
         7BMw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20210112;
        h=cc:to:subject:message-id:date:from:in-reply-to:references
         :mime-version:x-gm-message-state:from:to:cc;
        bh=qp5U4hlmW1coNM2H6xZQ1GZizUdeX5ho/eYaDjMVqY0=;
        b=d8WeiQlhs4iV9wHCz7bMfkeIado+wzijSFGVg07joxtuAjX4VKPFSu4sOXV0b/pBuK
         a/z4nkJnmFpTL25gtZK9L3lwTTLtaHrkikb9YpfY4pavOg+7W7XkirRfOUKgVT6RzkwM
         vN+vqhL0yNvTcfGXQhsKMAX5r7bDrgZn3u1k1pQB58Og5VQ5VbFSK9y/oMYTeScmeGHC
         WVg9hBKykj4sNQgi6+kr12XSB4h75SE0Rq+x5dqcg6Kj9HQWs5RdN/hTv2jgJv4p/qkM
         l8n/J+uYH+rRumN2wx0zdUrla6pQakSNUZCLRhqNRR/vQ2nbP8ryrKgLlookCiL2BCEW
         AzVQ==
X-Gm-Message-State: ACgBeo1tEPUQVZM7b6rSkKkzds7vy76yLT1Wr4pDiS7EL5cAm0K0lmlB
        8olvvN/DJe9z0aR6HoZ8T9D5vUyo5q8ZFivkn/M=
X-Google-Smtp-Source: AA6agR759TYd8NsABjdqIgQwmehgtiJHxZzljv9De4C9FMXY1pb6lH4ffUQZhTN72SxIF9dwqjYCHyMBlmCnFXT0IPA=
X-Received: by 2002:ad4:5baf:0:b0:476:6a9e:b5e1 with SMTP id
 15-20020ad45baf000000b004766a9eb5e1mr23122067qvq.64.1661332238224; Wed, 24
 Aug 2022 02:10:38 -0700 (PDT)
MIME-Version: 1.0
References: <20220824012624.2826445-1-yury.norov@gmail.com> <20220824012624.2826445-2-yury.norov@gmail.com>
In-Reply-To: <20220824012624.2826445-2-yury.norov@gmail.com>
From:   Andy Shevchenko <andy.shevchenko@gmail.com>
Date:   Wed, 24 Aug 2022 12:10:02 +0300
Message-ID: <CAHp75VcB08oTrB8R9Zyo4Ja=c_XqybqdCw46fY4_MNqvSSCtLQ@mail.gmail.com>
Subject: Re: [PATCH v2 1/3] lib/find_bit: introduce FIND_FIRST_BIT() macro
To:     Yury Norov <yury.norov@gmail.com>
Cc:     Linus Torvalds <torvalds@linux-foundation.org>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        Guenter Roeck <linux@roeck-us.net>,
        Dennis Zhou <dennis@kernel.org>,
        Russell King <linux@armlinux.org.uk>,
        Catalin Marinas <catalin.marinas@arm.com>,
        Andy Shevchenko <andriy.shevchenko@linux.intel.com>,
        Rasmus Villemoes <linux@rasmusvillemoes.dk>,
        Alexey Klimov <aklimov@redhat.com>,
        Kees Cook <keescook@chromium.org>,
        Andy Whitcroft <apw@canonical.com>
Content-Type: text/plain; charset="UTF-8"
X-Spam-Status: No, score=-2.1 required=5.0 tests=BAYES_00,DKIM_SIGNED,
        DKIM_VALID,DKIM_VALID_AU,DKIM_VALID_EF,FREEMAIL_FROM,
        RCVD_IN_DNSWL_NONE,SPF_HELO_NONE,SPF_PASS,T_SCC_BODY_TEXT_LINE
        autolearn=ham autolearn_force=no version=3.4.6
X-Spam-Checker-Version: SpamAssassin 3.4.6 (2021-04-09) on
        lindbergh.monkeyblade.net
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Aug 24, 2022 at 4:51 AM Yury Norov <yury.norov@gmail.com> wrote:
>
> Now that we have many flavors of find_first_bit(), and expect even more,
> it's better to have one macro that generates optimal code for all and makes
> maintaining of slightly different functions simpler.
>
> The logic common to all versions is moved to the new macro, and all the
> flavors are generated by providing an EXPRESSION macro-parameter, like
> in this example:
>
>   #define FIND_FIRST_BIT(EXPRESSION, size) ...
>
>   find_first_ornot_and_bit(addr1, addr2, addr3, size)
>   {
>         return FIND_NEXT_BIT(addr1[idx] | ~addr2[idx] & addr3[idx], size);
>   }
>
> The EXPRESSION may be of any complexity, as soon as it only refers
> the bitmap(s) and an iterator idx.
>
> The 'word_op' is here to allow the macro to generate code for _le
> versions on big-endian machines; used in the following patches.

...

> +#ifndef word_op
> +#define word_op
> +#endif

Not sure about the naming without namespace. Perhaps __ffs_word_op?

> +#define FIND_FIRST_BIT(EXPRESSION, size)                                       \
> +({                                                                             \
> +       unsigned long idx, val, sz = (size);                                    \
> +                                                                               \
> +       for (idx = 0; idx * BITS_PER_LONG < sz; idx++) {                        \

I think we can do slightly better:

for (unsigned long idx = 0; idx < sz; idx += BITS_PER_LONG) {
  unsigned long val;

> +               val = (EXPRESSION);                                             \
> +               if (val) {                                                      \
> +                       sz = min(idx * BITS_PER_LONG + __ffs(word_op(val)), sz);\

sz = min(idx + __ffs(...));

> +                       break;                                                  \
> +               }                                                               \
> +       }                                                                       \
> +                                                                               \
> +       sz;                                                                     \
> +})


-- 
With Best Regards,
Andy Shevchenko
